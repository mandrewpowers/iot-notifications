using System.Xml;
using System.Xml.Schema;
using System.Xml.Serialization;

namespace IoT_Notifications.Integrations {
    // Note: This class was originally generated by Gemini as a generic serializable dictionary and has been modified - still needs testing

    [Serializable]
    [XmlRoot("dictionary")]
    public class IntegrationCollection : Dictionary<Guid, IIntegration>, IXmlSerializable {
        static Dictionary<Type, XmlSerializer> SERIALIZERS = new Dictionary<Type, XmlSerializer>();

        public static XmlSerializer GetTypeSerializer(Type type) {
            if (SERIALIZERS.TryGetValue(type, out var existing)) {
                return existing;
            }

            var serializer = new XmlSerializer(type);
            SERIALIZERS.Add(type, serializer);

            return serializer;
        }

        public XmlSchema? GetSchema() {
            return null;
        }

        public void ReadXml(XmlReader reader) {
            var keySerializer = GetTypeSerializer(typeof(Guid));

            bool wasEmpty = reader.IsEmptyElement;
            reader.Read();

            if (wasEmpty) {
                return;
            }

            // TODO: Investigate potential null issues here
            while (reader.NodeType != XmlNodeType.EndElement) {
                reader.ReadStartElement("item");

                reader.ReadStartElement("key");
                Guid key = (Guid)keySerializer.Deserialize(reader);
                reader.ReadEndElement();

                // TODO: This doesn't feel right (what if the order of elements is wrong)
                var valueType = Type.GetType(reader.GetAttribute("type"));
                reader.ReadStartElement("value");
                IIntegration value = (IIntegration)GetTypeSerializer(valueType).Deserialize(reader);
                reader.ReadEndElement();

                this.Add(key, value);

                reader.ReadEndElement();
                reader.MoveToContent();
            }
            reader.ReadEndElement();
        }

        public void WriteXml(XmlWriter writer) {
            var keySerializer = GetTypeSerializer(typeof(Guid));

            foreach (KeyValuePair<Guid, IIntegration> pair in this) {
                writer.WriteStartElement("item");

                writer.WriteStartElement("key");
                keySerializer.Serialize(writer, pair.Key);
                writer.WriteEndElement();

                writer.WriteStartElement("value");
                var valueType = pair.Value.GetType();
                writer.WriteAttributeString("type", valueType.AssemblyQualifiedName);
                GetTypeSerializer(valueType).Serialize(writer, pair.Value);
                writer.WriteEndElement();

                writer.WriteEndElement();
            }
        }
    }
}
